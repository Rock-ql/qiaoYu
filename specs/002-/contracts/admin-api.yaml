openapi: 3.0.3
info:
  title: 羽毛球预约系统 - 后台管理API
  description: 后台管理页面样式优化项目相关的API接口定义
  version: 1.0.0
  contact:
    name: 羽毛球预约系统开发团队
    email: dev@badminton.com

servers:
  - url: http://localhost:8080/api/admin
    description: 本地开发环境
  - url: https://api.badminton.com/admin
    description: 生产环境

paths:
  # 仪表板相关接口
  /dashboard/stats:
    get:
      summary: 获取仪表板统计数据
      tags: [Dashboard]
      responses:
        '200':
          description: 成功获取统计数据
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_DashboardStats'

  # 用户管理接口
  /users:
    get:
      summary: 获取用户列表
      tags: [UserManagement]
      parameters:
        - name: current
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 10
        - name: keyword
          in: query
          schema:
            type: string
          description: 搜索关键词
        - name: status
          in: query
          schema:
            type: integer
            enum: [0, 1, 2]
          description: 用户状态筛选
        - name: role
          in: query
          schema:
            type: string
            enum: [admin, user, moderator]
          description: 角色筛选
      responses:
        '200':
          description: 成功获取用户列表
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_PaginatedUsers'

    post:
      summary: 创建新用户
      tags: [UserManagement]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '200':
          description: 用户创建成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_User'

  /users/{id}:
    get:
      summary: 获取用户详情
      tags: [UserManagement]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 成功获取用户详情
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_User'

    put:
      summary: 更新用户信息
      tags: [UserManagement]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: 用户更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_User'

    delete:
      summary: 删除用户
      tags: [UserManagement]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 用户删除成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_Boolean'

  # 活动管理接口
  /activities:
    get:
      summary: 获取活动列表
      tags: [ActivityManagement]
      parameters:
        - name: current
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 10
        - name: keyword
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: integer
            enum: [0, 1, 2, 3, 4]
        - name: dateRange
          in: query
          schema:
            type: array
            items:
              type: string
              format: date
      responses:
        '200':
          description: 成功获取活动列表
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_PaginatedActivities'

    post:
      summary: 创建新活动
      tags: [ActivityManagement]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateActivityRequest'
      responses:
        '200':
          description: 活动创建成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_Activity'

  /activities/{id}:
    get:
      summary: 获取活动详情
      tags: [ActivityManagement]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 成功获取活动详情
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_Activity'

    put:
      summary: 更新活动信息
      tags: [ActivityManagement]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateActivityRequest'
      responses:
        '200':
          description: 活动更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_Activity'

  # 费用统计接口
  /expenses:
    get:
      summary: 获取费用统计
      tags: [ExpenseStatistics]
      parameters:
        - name: current
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 10
        - name: activityId
          in: query
          schema:
            type: integer
        - name: userId
          in: query
          schema:
            type: integer
        - name: type
          in: query
          schema:
            type: string
            enum: [participation, refund, penalty]
        - name: status
          in: query
          schema:
            type: integer
            enum: [0, 1, 2, 3]
      responses:
        '200':
          description: 成功获取费用列表
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_PaginatedExpenses'

  /expenses/statistics:
    get:
      summary: 获取费用统计数据
      tags: [ExpenseStatistics]
      parameters:
        - name: dateRange
          in: query
          schema:
            type: array
            items:
              type: string
              format: date
      responses:
        '200':
          description: 成功获取费用统计
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_ExpenseStatistics'

components:
  schemas:
    # 通用响应模型
    ApiResponse_DashboardStats:
      type: object
      properties:
        code:
          type: integer
          example: 0
        message:
          type: string
          example: "success"
        data:
          $ref: '#/components/schemas/DashboardStats'
        timestamp:
          type: integer
          format: int64

    ApiResponse_User:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
        data:
          $ref: '#/components/schemas/User'
        timestamp:
          type: integer

    ApiResponse_PaginatedUsers:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
        data:
          $ref: '#/components/schemas/PaginatedUsers'
        timestamp:
          type: integer

    ApiResponse_Activity:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
        data:
          $ref: '#/components/schemas/Activity'
        timestamp:
          type: integer

    ApiResponse_PaginatedActivities:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
        data:
          $ref: '#/components/schemas/PaginatedActivities'
        timestamp:
          type: integer

    ApiResponse_PaginatedExpenses:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
        data:
          $ref: '#/components/schemas/PaginatedExpenses'
        timestamp:
          type: integer

    ApiResponse_ExpenseStatistics:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
        data:
          $ref: '#/components/schemas/ExpenseStatistics'
        timestamp:
          type: integer

    ApiResponse_Boolean:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
        data:
          type: boolean
        timestamp:
          type: integer

    # 数据模型
    DashboardStats:
      type: object
      properties:
        userStats:
          type: object
          properties:
            total:
              type: integer
            activeToday:
              type: integer
            newThisMonth:
              type: integer
            growthRate:
              type: number
              format: double
        activityStats:
          type: object
          properties:
            total:
              type: integer
            inProgress:
              type: integer
            completedThisMonth:
              type: integer
            participationRate:
              type: number
              format: double
        revenueStats:
          type: object
          properties:
            totalRevenue:
              type: number
              format: double
            monthlyRevenue:
              type: number
              format: double
            growthRate:
              type: number
              format: double
            refundAmount:
              type: number
              format: double
        systemStats:
          type: object
          properties:
            systemHealth:
              type: string
              enum: [good, warning, error]
            apiResponseTime:
              type: number
              format: double
            errorRate:
              type: number
              format: double
            activeConnections:
              type: integer

    User:
      type: object
      properties:
        id:
          type: integer
        nickname:
          type: string
        phone:
          type: string
        email:
          type: string
        avatar:
          type: string
        status:
          type: integer
          enum: [0, 1, 2]
        role:
          type: string
          enum: [admin, user, moderator]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        lastLoginAt:
          type: string
          format: date-time

    PaginatedUsers:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/User'
        total:
          type: integer
        current:
          type: integer
        pageSize:
          type: integer
        pages:
          type: integer

    Activity:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        location:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        maxParticipants:
          type: integer
        currentParticipants:
          type: integer
        fee:
          type: number
          format: double
        status:
          type: integer
          enum: [0, 1, 2, 3, 4]
        organizerId:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    PaginatedActivities:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/Activity'
        total:
          type: integer
        current:
          type: integer
        pageSize:
          type: integer
        pages:
          type: integer

    Expense:
      type: object
      properties:
        id:
          type: integer
        activityId:
          type: integer
        userId:
          type: integer
        amount:
          type: number
          format: double
        type:
          type: string
          enum: [participation, refund, penalty]
        description:
          type: string
        status:
          type: integer
          enum: [0, 1, 2, 3]
        paymentMethod:
          type: string
        transactionId:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    PaginatedExpenses:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/Expense'
        total:
          type: integer
        current:
          type: integer
        pageSize:
          type: integer
        pages:
          type: integer

    ExpenseStatistics:
      type: object
      properties:
        totalIncome:
          type: number
          format: double
        totalRefund:
          type: number
          format: double
        netIncome:
          type: number
          format: double
        dailyStats:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date
              income:
                type: number
                format: double
              refund:
                type: number
                format: double

    # 请求模型
    CreateUserRequest:
      type: object
      required:
        - nickname
        - phone
      properties:
        nickname:
          type: string
          minLength: 2
          maxLength: 20
        phone:
          type: string
          pattern: '^1[3-9]\d{9}$'
        email:
          type: string
          format: email
        role:
          type: string
          enum: [admin, user, moderator]
          default: user

    UpdateUserRequest:
      type: object
      properties:
        nickname:
          type: string
          minLength: 2
          maxLength: 20
        phone:
          type: string
          pattern: '^1[3-9]\d{9}$'
        email:
          type: string
          format: email
        status:
          type: integer
          enum: [0, 1, 2]
        role:
          type: string
          enum: [admin, user, moderator]

    CreateActivityRequest:
      type: object
      required:
        - title
        - location
        - startTime
        - endTime
        - maxParticipants
      properties:
        title:
          type: string
          maxLength: 100
        description:
          type: string
          maxLength: 500
        location:
          type: string
          maxLength: 200
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        maxParticipants:
          type: integer
          minimum: 1
          maximum: 1000
        fee:
          type: number
          format: double
          minimum: 0

    UpdateActivityRequest:
      type: object
      properties:
        title:
          type: string
          maxLength: 100
        description:
          type: string
          maxLength: 500
        location:
          type: string
          maxLength: 200
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        maxParticipants:
          type: integer
          minimum: 1
          maximum: 1000
        fee:
          type: number
          format: double
          minimum: 0
        status:
          type: integer
          enum: [0, 1, 2, 3, 4]

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []